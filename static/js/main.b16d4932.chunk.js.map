{"version":3,"sources":["components/Header.jsx","components/VisualLearningSection.jsx","components/AudioLearningSection.jsx","components/IntegrationSection.jsx","components/TranscendenceSection.jsx","components/MemoryPathSection.jsx","components/Footer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","_ref","darkMode","toggleDarkMode","currentView","setCurrentView","React","createElement","className","onClick","VisualLearningSection","addMemory","images","setImages","useState","reflections","setReflections","fileInputRef","useRef","type","accept","multiple","onChange","e","imagePromises","Array","from","target","files","map","file","Promise","resolve","reader","FileReader","onload","result","readAsDataURL","all","then","results","ref","src","index","key","alt","placeholder","value","rows","saveVisualMemory","length","reflection","timestamp","Date","toISOString","current","disabled","AudioLearningSection","audioRecordings","setAudioRecordings","isRecording","setIsRecording","audioReflection","setAudioReflection","mediaRecorderRef","audioChunksRef","stopRecording","stop","async","stream","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","ondataavailable","event","data","size","push","onstop","audioBlob","Blob","audioUrl","URL","createObjectURL","start","error","console","alert","controls","saveAudioMemory","recordings","IntegrationSection","memories","integratedReflection","setIntegratedReflection","selectedVisual","setSelectedVisual","selectedAudio","setSelectedAudio","visualMemories","filter","memory","audioMemories","id","toLocaleDateString","saveIntegratedMemory","visualReference","audioReference","TranscendenceSection","isActive","toggleActive","breathCount","setBreathCount","meditationActive","setMeditationActive","timeElapsed","setTimeElapsed","useEffect","interval","setInterval","prevTime","clearInterval","seconds","secs","Math","floor","formatTime","Fragment","incrementBreath","prevCount","stopMeditation","startMeditation","MemoryPathSection","deleteMemory","filterType","setFilterType","sortOrder","setSortOrder","sortedMemories","sort","a","b","dateA","dateB","dateString","date","toLocaleTimeString","formatDate","Footer","getFullYear","App","setDarkMode","userMemories","setUserMemories","isTranscendenceActive","setIsTranscendenceActive","savedMemories","localStorage","getItem","JSON","parse","setItem","stringify","now","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b16d4932.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header({ darkMode, toggleDarkMode, currentView, setCurrentView }) {\n  return (\n    <header className={`header ${darkMode ? 'dark' : 'light'}`}>\n      <div className=\"logo\">\n        <h1>कव्यपथ</h1>\n        <p>A Digital Poetry Platform</p>\n      </div>\n      <nav>\n        <ul>\n          <li onClick={() => setCurrentView('all')} className={currentView === 'all' ? 'active' : ''}>\n            सर्वम् (All)\n          </li>\n          <li onClick={() => setCurrentView('visual')} className={currentView === 'visual' ? 'active' : ''}>\n            चक्षुरध्ययनम् (Visual)\n          </li>\n          <li onClick={() => setCurrentView('audio')} className={currentView === 'audio' ? 'active' : ''}>\n            वचनं श्रवणम् (Audio)\n          </li>\n          <li onClick={() => setCurrentView('integration')} className={currentView === 'integration' ? 'active' : ''}>\n            एककृतम् (Integration)\n          </li>\n          <li onClick={() => setCurrentView('transcendence')} className={currentView === 'transcendence' ? 'active' : ''}>\n            शिवोऽहम् (Transcendence)\n          </li>\n          <li onClick={() => setCurrentView('memory')} className={currentView === 'memory' ? 'active' : ''}>\n            संग्रहकस्य (Memory)\n          </li>\n        </ul>\n      </nav>\n      <button className=\"theme-toggle\" onClick={toggleDarkMode}>\n        {darkMode ? '☀️' : '🌙'}\n      </button>\n    </header>\n  );\n}\n\nexport default Header;","import React, { useState, useRef } from 'react';\n\nfunction VisualLearningSection({ darkMode, addMemory }) {\n  const [images, setImages] = useState([]);\n  const [reflections, setReflections] = useState('');\n  const fileInputRef = useRef(null);\n\n  const handleImageUpload = (e) => {\n    const files = Array.from(e.target.files);\n    \n    const imagePromises = files.map(file => {\n      return new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.onload = (e) => resolve(e.target.result);\n        reader.readAsDataURL(file);\n      });\n    });\n    \n    Promise.all(imagePromises).then(results => {\n      setImages([...images, ...results]);\n    });\n  };\n\n  const handleReflectionChange = (e) => {\n    setReflections(e.target.value);\n  };\n\n  const saveVisualMemory = () => {\n    if (images.length > 0) {\n      addMemory({\n        type: 'visual',\n        images: images,\n        reflection: reflections,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Clear the form\n      setImages([]);\n      setReflections('');\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  return (\n    <section className={`section visual-section ${darkMode ? 'dark' : 'light'}`}>\n      <div className=\"section-content\">\n        <h2>चक्षुरध्ययनम् (Visual Learning)</h2>\n        <p className=\"shloka-meaning\">\"देखना अध्ययन है\" - \"Seeing is studying\"</p>\n        \n        <div className=\"visual-upload\">\n          <h3>Upload Images for Visual Learning</h3>\n          <input \n            type=\"file\" \n            accept=\"image/*\" \n            multiple \n            onChange={handleImageUpload} \n            ref={fileInputRef}\n          />\n          \n          <div className=\"image-preview\">\n            {images.map((src, index) => (\n              <img key={index} src={src} alt={`Upload ${index + 1}`} />\n            ))}\n          </div>\n          \n          <textarea\n            placeholder=\"Share your reflections on what you see...\"\n            value={reflections}\n            onChange={handleReflectionChange}\n            rows={5}\n          />\n          \n          <button \n            className=\"save-button\"\n            onClick={saveVisualMemory}\n            disabled={images.length === 0}\n          >\n            Save Visual Experience\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default VisualLearningSection;","import React, { useState, useRef } from 'react';\n\nfunction AudioLearningSection({ darkMode, addMemory }) {\n  const [audioRecordings, setAudioRecordings] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioReflection, setAudioReflection] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  \n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n      \n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      \n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/mpeg' });\n        const audioUrl = URL.createObjectURL(audioBlob);\n        setAudioRecordings([...audioRecordings, audioUrl]);\n      };\n      \n      mediaRecorder.start();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      alert('Could not access microphone. Please check your permissions.');\n    }\n  };\n  \n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n  \n  const handleReflectionChange = (e) => {\n    setAudioReflection(e.target.value);\n  };\n  \n  const saveAudioMemory = () => {\n    if (audioRecordings.length > 0) {\n      addMemory({\n        type: 'audio',\n        recordings: audioRecordings,\n        reflection: audioReflection,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Clear the form\n      setAudioRecordings([]);\n      setAudioReflection('');\n    }\n  };\n\n  return (\n    <section className={`section audio-section ${darkMode ? 'dark' : 'light'}`}>\n      <div className=\"section-content\">\n        <h2>वचनं श्रवणम् (Audio Learning)</h2>\n        <p className=\"shloka-meaning\">\"सुनना श्रवण है\" - \"Listening is hearing\"</p>\n        \n        <div className=\"audio-recorder\">\n          <h3>Record Audio for Learning</h3>\n          \n          <div className=\"recording-controls\">\n            {!isRecording ? (\n              <button className=\"record-button\" onClick={startRecording}>\n                Start Recording\n              </button>\n            ) : (\n              <button className=\"stop-button\" onClick={stopRecording}>\n                Stop Recording\n              </button>\n            )}\n          </div>\n          \n          <div className=\"audio-list\">\n            {audioRecordings.map((audioUrl, index) => (\n              <div key={index} className=\"audio-item\">\n                <audio controls src={audioUrl}></audio>\n                <span>Recording {index + 1}</span>\n              </div>\n            ))}\n          </div>\n          \n          <textarea\n            placeholder=\"Share your reflections on what you hear...\"\n            value={audioReflection}\n            onChange={handleReflectionChange}\n            rows={5}\n          />\n          \n          <button \n            className=\"save-button\"\n            onClick={saveAudioMemory}\n            disabled={audioRecordings.length === 0}\n          >\n            Save Audio Experience\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n}\n\n// At the bottom of AudioLearningSection.jsx, add:\nexport default AudioLearningSection;","import React, { useState } from 'react';\n\nfunction IntegrationSection({ darkMode, memories, addMemory }) {\n  const [integratedReflection, setIntegratedReflection] = useState('');\n  const [selectedVisual, setSelectedVisual] = useState(null);\n  const [selectedAudio, setSelectedAudio] = useState(null);\n  \n  const visualMemories = memories.filter(memory => memory.type === 'visual');\n  const audioMemories = memories.filter(memory => memory.type === 'audio');\n  \n  const handleReflectionChange = (e) => {\n    setIntegratedReflection(e.target.value);\n  };\n  \n  const saveIntegratedMemory = () => {\n    if (selectedVisual && selectedAudio && integratedReflection) {\n      addMemory({\n        type: 'integrated',\n        visualReference: selectedVisual,\n        audioReference: selectedAudio,\n        reflection: integratedReflection,\n        timestamp: new Date().toISOString()\n      });\n      \n      // Clear the form\n      setSelectedVisual(null);\n      setSelectedAudio(null);\n      setIntegratedReflection('');\n    }\n  };\n\n  return (\n    <section className={`section integration-section ${darkMode ? 'dark' : 'light'}`}>\n      <div className=\"section-content\">\n        <h2>सर्वमेककृतम् (Integration)</h2>\n        <p className=\"shloka-meaning\">\"सब कुछ एकीकृत है\" - \"Everything is integrated\"</p>\n        \n        <div className=\"integration-form\">\n          <h3>Integrate Visual and Audio Experiences</h3>\n          \n          <div className=\"memory-selectors\">\n            <div className=\"visual-selector\">\n              <h4>Select a Visual Memory</h4>\n              <div className=\"memory-grid\">\n                {visualMemories.length > 0 ? (\n                  visualMemories.map(memory => (\n                    <div \n                      key={memory.id}\n                      className={`memory-card ${selectedVisual === memory.id ? 'selected' : ''}`}\n                      onClick={() => setSelectedVisual(memory.id)}\n                    >\n                      {memory.images && memory.images[0] && (\n                        <img src={memory.images[0]} alt=\"Visual memory\" />\n                      )}\n                      <span>{new Date(memory.timestamp).toLocaleDateString()}</span>\n                    </div>\n                  ))\n                ) : (\n                  <p>No visual memories saved yet. Add some in the Visual section.</p>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"audio-selector\">\n              <h4>Select an Audio Memory</h4>\n              <div className=\"memory-grid\">\n                {audioMemories.length > 0 ? (\n                  audioMemories.map(memory => (\n                    <div \n                      key={memory.id}\n                      className={`memory-card ${selectedAudio === memory.id ? 'selected' : ''}`}\n                      onClick={() => setSelectedAudio(memory.id)}\n                    >\n                      {memory.recordings && memory.recordings[0] && (\n                        <audio controls src={memory.recordings[0]}></audio>\n                      )}\n                      <span>{new Date(memory.timestamp).toLocaleDateString()}</span>\n                    </div>\n                  ))\n                ) : (\n                  <p>No audio memories saved yet. Add some in the Audio section.</p>\n                )}\n              </div>\n            </div>\n          </div>\n          \n          <textarea\n            placeholder=\"Reflect on how these experiences connect and integrate...\"\n            value={integratedReflection}\n            onChange={handleReflectionChange}\n            rows={5}\n          />\n          \n          <button \n            className=\"save-button\"\n            onClick={saveIntegratedMemory}\n            disabled={!selectedVisual || !selectedAudio || !integratedReflection}\n          >\n            Save Integrated Experience\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default IntegrationSection;","import React, { useState, useEffect } from 'react';\n\nfunction TranscendenceSection({ darkMode, isActive, toggleActive }) {\n  const [breathCount, setBreathCount] = useState(0);\n  const [meditationActive, setMeditationActive] = useState(false);\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  \n  useEffect(() => {\n    let interval = null;\n    \n    if (meditationActive) {\n      interval = setInterval(() => {\n        setTimeElapsed(prevTime => prevTime + 1);\n      }, 1000);\n    } else {\n      clearInterval(interval);\n    }\n    \n    return () => clearInterval(interval);\n  }, [meditationActive]);\n  \n  const startMeditation = () => {\n    setMeditationActive(true);\n    setTimeElapsed(0);\n    setBreathCount(0);\n  };\n  \n  const stopMeditation = () => {\n    setMeditationActive(false);\n  };\n  \n  const incrementBreath = () => {\n    setBreathCount(prevCount => prevCount + 1);\n  };\n  \n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs < 10 ? '0' + secs : secs}`;\n  };\n\n  return (\n    <section className={`section transcendence-section ${darkMode ? 'dark' : 'light'} ${isActive ? 'transcendence-active' : ''}`}>\n      <div className=\"section-content\">\n        <h2>शिवोऽहम् (Transcendence)</h2>\n        <p className=\"shloka-meaning\">\n          \"मैं शुद्ध आत्मा हूँ, जो इन सबसे परे है, और मैं ही शिव हूँ\" - \n          \"I am pure consciousness, beyond all physical limitations\"\n        </p>\n        \n        <button className=\"transcendence-toggle\" onClick={toggleActive}>\n          {isActive ? 'Exit Transcendence Mode' : 'Enter Transcendence Mode'}\n        </button>\n        \n        {isActive && (\n          <div className=\"meditation-container\">\n            <div className=\"meditation-circle\">\n              <div className={`breath-animation ${meditationActive ? 'breathing' : ''}`}></div>\n              <div className=\"meditation-stats\">\n                <p>Time: {formatTime(timeElapsed)}</p>\n                <p>Breaths: {breathCount}</p>\n              </div>\n            </div>\n            \n            <div className=\"meditation-controls\">\n              {!meditationActive ? (\n                <button className=\"meditation-button start\" onClick={startMeditation}>\n                  Begin Meditation\n                </button>\n              ) : (\n                <>\n                  <button className=\"meditation-button breath\" onClick={incrementBreath}>\n                    Record Breath\n                  </button>\n                  <button className=\"meditation-button stop\" onClick={stopMeditation}>\n                    End Meditation\n                  </button>\n                </>\n              )}\n            </div>\n            \n            <div className=\"transcendence-message\">\n              <p>\n                In this state of meditation, realize that you are beyond physical existence.\n                Not defined by breath (प्राण), elements (धातु), or bodily functions.\n                You are pure consciousness (चिदानन्द) - simply observe and be.\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n\n\nexport default TranscendenceSection;","import React, { useState } from 'react';\n\nfunction MemoryPathSection({ darkMode, memories, deleteMemory }) {\n  const [filterType, setFilterType] = useState('all');\n  const [sortOrder, setSortOrder] = useState('newest');\n  \n  const filteredMemories = memories.filter(memory => {\n    if (filterType === 'all') return true;\n    return memory.type === filterType;\n  });\n  \n  const sortedMemories = [...filteredMemories].sort((a, b) => {\n    const dateA = new Date(a.timestamp);\n    const dateB = new Date(b.timestamp);\n    \n    if (sortOrder === 'newest') {\n      return dateB - dateA;\n    } else {\n      return dateA - dateB;\n    }\n  });\n  \n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n  };\n\n  return (\n    <section className={`section memory-section ${darkMode ? 'dark' : 'light'}`}>\n      <div className=\"section-content\">\n        <h2>संग्रहकस्य यन्त्र (Memory Machine)</h2>\n        <p className=\"shloka-meaning\">\n          \"संग्रहकर्ता की मशीन, वर्तमान का पथ, आधार का शिल्प\" - \n          \"The collector's machine, the path of the present, the craft of the foundation\"\n        </p>\n        \n        <div className=\"memory-controls\">\n          <div className=\"filter-sort\">\n            <select \n              value={filterType} \n              onChange={(e) => setFilterType(e.target.value)}\n              className=\"memory-filter\"\n            >\n              <option value=\"all\">All Memories</option>\n              <option value=\"visual\">Visual Only</option>\n              <option value=\"audio\">Audio Only</option>\n              <option value=\"integrated\">Integrated Only</option>\n            </select>\n            \n            <select \n              value={sortOrder} \n              onChange={(e) => setSortOrder(e.target.value)}\n              className=\"memory-sort\"\n            >\n              <option value=\"newest\">Newest First</option>\n              <option value=\"oldest\">Oldest First</option>\n            </select>\n          </div>\n        </div>\n        \n        <div className=\"memories-grid\">\n          {sortedMemories.length > 0 ? (\n            sortedMemories.map(memory => (\n              <div key={memory.id} className={`memory-card ${memory.type}`}>\n                <div className=\"memory-header\">\n                  <span className=\"memory-type\">\n                    {memory.type === 'visual' && 'चक्षुरध्ययनम् (Visual)'}\n                    {memory.type === 'audio' && 'वचनं श्रवणम् (Audio)'}\n                    {memory.type === 'integrated' && 'सर्वमेककृतम् (Integrated)'}\n                  </span>\n                  <span className=\"memory-date\">{formatDate(memory.timestamp)}</span>\n                </div>\n                \n                <div className=\"memory-content\">\n                  {memory.type === 'visual' && memory.images && memory.images[0] && (\n                    <div className=\"memory-images\">\n                      <img src={memory.images[0]} alt=\"Visual memory\" />\n                      {memory.images.length > 1 && <span>+{memory.images.length - 1} more</span>}\n                    </div>\n                  )}\n                  \n                  {memory.type === 'audio' && memory.recordings && memory.recordings[0] && (\n                    <div className=\"memory-audio\">\n                      <audio controls src={memory.recordings[0]}></audio>\n                      {memory.recordings.length > 1 && <span>+{memory.recordings.length - 1} more</span>}\n                    </div>\n                  )}\n                  \n                  {memory.type === 'integrated' && (\n                    <div className=\"memory-integrated\">\n                      <p>Integrated reflection connecting visual and audio experiences</p>\n                    </div>\n                  )}\n                  \n                  {memory.reflection && (\n                    <div className=\"memory-reflection\">\n                      <p>{memory.reflection}</p>\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"memory-actions\">\n                  <button \n                    className=\"delete-memory\" \n                    onClick={() => deleteMemory(memory.id)}\n                  >\n                    Delete\n                  </button>\n                </div>\n              </div>\n            ))\n          ) : (\n            <p className=\"no-memories\">No memories found. Add some using the sections above.</p>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default MemoryPathSection;\n","import React from 'react';\n\nfunction Footer({ darkMode }) {\n  return (\n    <footer className={`footer ${darkMode ? 'dark' : 'light'}`}>\n      <div className=\"footer-content\">\n        <div className=\"footer-section\">\n          <h3>कव्यपथ - Kavyapath</h3>\n          <p>A Digital Poetry Platform inspired by Sanskrit wisdom</p>\n        </div>\n        \n        <div className=\"footer-section\">\n          <h3>Sanskrit Shlokas</h3>\n          <p>\"चक्षुरध्ययनम्, वचनं श्रवणम्, सर्वमेककृतम्\"</p>\n          <p>\"न च प्राण संज्ञो न वै पञ्चवायु...\"</p>\n          <p>\"संग्रहकस्य यन्त्र, वर्तमानस्य गति, आधारस्य शिल्प\"</p>\n        </div>\n        \n        <div className=\"footer-section\">\n          <h3>Created with</h3>\n          <p>React • Poetry • Ancient Wisdom</p>\n          <p>© {new Date().getFullYear()} Kavyapath</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;","import React, { useState, useEffect,  } from 'react';\nimport './App.css';\n\n// Main components\nimport Header from './components/Header';\nimport VisualLearningSection from './components/VisualLearningSection';\nimport AudioLearningSection from './components/AudioLearningSection';\nimport IntegrationSection from './components/IntegrationSection';\nimport TranscendenceSection from './components/TranscendenceSection';\nimport MemoryPathSection from './components/MemoryPathSection';\nimport Footer from './components/Footer';\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  const [userMemories, setUserMemories] = useState([]);\n  const [currentView, setCurrentView] = useState('all');\n  const [isTranscendenceActive, setIsTranscendenceActive] = useState(false);\n  \n  // Load memories from localStorage when the component mounts\n  useEffect(() => {\n    const savedMemories = localStorage.getItem('kavyapathMemories');\n    if (savedMemories) {\n      setUserMemories(JSON.parse(savedMemories));\n    }\n  }, []);\n\n  // Save memories to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('kavyapathMemories', JSON.stringify(userMemories));\n  }, [userMemories]);\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  const addMemory = (memory) => {\n    setUserMemories([...userMemories, { ...memory, id: Date.now() }]);\n  };\n\n  const deleteMemory = (id) => {\n    setUserMemories(userMemories.filter(memory => memory.id !== id));\n  };\n\n  return (\n    <div className={`app ${darkMode ? 'dark-mode' : 'light-mode'}`}>\n      <Header \n        darkMode={darkMode} \n        toggleDarkMode={toggleDarkMode}\n        currentView={currentView}\n        setCurrentView={setCurrentView}\n      />\n      \n      {(currentView === 'all' || currentView === 'visual') && (\n        <VisualLearningSection darkMode={darkMode} addMemory={addMemory} />\n      )}\n      \n      {(currentView === 'all' || currentView === 'audio') && (\n        <AudioLearningSection darkMode={darkMode} addMemory={addMemory} />\n      )}\n      \n      {(currentView === 'all' || currentView === 'integration') && (\n        <IntegrationSection \n          darkMode={darkMode} \n          memories={userMemories}\n          addMemory={addMemory}\n        />\n      )}\n      \n      {(currentView === 'all' || currentView === 'transcendence') && (\n        <TranscendenceSection \n          darkMode={darkMode}\n          isActive={isTranscendenceActive}\n          toggleActive={() => setIsTranscendenceActive(!isTranscendenceActive)}\n        />\n      )}\n      \n      {(currentView === 'all' || currentView === 'memory') && (\n        <MemoryPathSection \n          darkMode={darkMode} \n          memories={userMemories}\n          deleteMemory={deleteMemory}\n        />\n      )}\n      \n      <Footer darkMode={darkMode} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}